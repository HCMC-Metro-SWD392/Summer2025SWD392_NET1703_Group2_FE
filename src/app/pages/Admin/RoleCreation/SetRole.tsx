import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Card,
  Form,
  Input,
  Button,
  message,
  Space,
  Typography,
  Spin,
  Row,
  Col,
  Alert,
  Divider,
  Tabs,
  Select,
} from 'antd';
import {
  ArrowLeftOutlined,
  UserAddOutlined,
  InfoCircleOutlined,
  LockOutlined,
  MailOutlined,
  PhoneOutlined,
  UserOutlined,
  CrownOutlined,
  TeamOutlined,
} from '@ant-design/icons';
import { RoleApi } from '../../../../api/auth/role';

const { Title } = Typography;
const { TabPane } = Tabs;
const { Option } = Select;

interface SetRoleForm {
  email: string;
  role: 'admin' | 'manager';
}

interface ManualRoleForm {
  fullName: string;
  phoneNumber: string;
  email: string;
  password: string;
  confirmPassword: string;
  role: 'admin' | 'manager';
}

const SetRole: React.FC = () => {
  const [formEmail] = Form.useForm();
  const [formManual] = Form.useForm();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);

  const handleSubmitEmail = async (values: SetRoleForm) => {
    try {
      setLoading(true);
      let response;
      if (values.role === 'admin') {
        response = await RoleApi.setAdminRole(values.email);
      } else {
        response = await RoleApi.setManagerRole(values.email);
      }
      if (response.isSuccess) {
        message.success(`G√°n vai tr√≤ ${values.role === 'admin' ? 'admin' : 'manager'} th√†nh c√¥ng!`);
        formEmail.resetFields();
        navigate('/admin/set-role');
      } else {
        message.error(response.message || 'G√°n vai tr√≤ th·∫•t b·∫°i!');
      }
    } catch (error: any) {
      message.error(error.message || 'L·ªói khi g√°n vai tr√≤!');
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitManual = async (values: ManualRoleForm) => {
    try {
      setLoading(true);
      if (values.password !== values.confirmPassword) {
        message.error('M·∫≠t kh·∫©u v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp!');
        return;
      }
      const passwordRegex = /^(?=.*[A-Z])(?=.*[!@#$%^&*])/;
      if (!passwordRegex.test(values.password)) {
        message.error('M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 1 ch·ªØ vi·∫øt hoa v√† 1 k√Ω t·ª± ƒë·∫∑c bi·ªát.');
        return;
      }
      const { role, ...payload } = values;
      let response;
      if (role === 'admin') {
        response = await RoleApi.createAdmin(payload);
      } else {
        response = await RoleApi.createManager(payload);
      }
      if (response.isSuccess) {
        message.success(`T·∫°o t√†i kho·∫£n ${role === 'admin' ? 'admin' : 'manager'} th√†nh c√¥ng!`);
        formManual.resetFields();
      } else {
        message.error(response.message || 'T·∫°o t√†i kho·∫£n th·∫•t b·∫°i!');
      }
    } catch (error: any) {
      message.error(error.message || 'L·ªói khi t·∫°o t√†i kho·∫£n!');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Space direction="vertical" size="large" style={{ width: '100%', padding: '24px' }}>
      <Space>
        <Title level={2} style={{ margin: 0 }}>
          <CrownOutlined style={{ marginRight: '8px' }} />
          T·∫°o ho·∫∑c g√°n vai tr√≤ Admin/Manager
        </Title>
      </Space>

      <Row gutter={[24, 24]}>
        <Col xs={24} lg={16}>
          <Card>
            <Spin spinning={loading}>
              <Tabs defaultActiveKey="1" size="large">
                <TabPane tab="üîó G√°n vai tr√≤ b·∫±ng Email" key="1">
                  <Form
                    form={formEmail}
                    layout="vertical"
                    onFinish={handleSubmitEmail}
                    disabled={loading}
                    size="large"
                  >
                    <Form.Item
                      name="role"
                      label="Ch·ªçn vai tr√≤"
                      rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn vai tr√≤' }]}
                    >
                      <Select placeholder="Ch·ªçn vai tr√≤">
                        <Option value="admin">Admin</Option>
                        <Option value="manager">Manager</Option>
                      </Select>
                    </Form.Item>
                    <Form.Item
                      name="email"
                      label="Email ng∆∞·ªùi d√πng"
                      rules={[
                        { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
                        { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' },
                      ]}
                    >
                      <Input prefix={<MailOutlined />} placeholder="email@domain.com" />
                    </Form.Item>
                    <Form.Item>
                      <Space>
                        <Button
                          type="primary"
                          htmlType="submit"
                          icon={<UserAddOutlined />}
                          loading={loading}
                          size="large"
                        >
                          G√°n vai tr√≤
                        </Button>
                      </Space>
                    </Form.Item>
                  </Form>
                </TabPane>

                <TabPane tab="‚úçÔ∏è T·∫°o t√†i kho·∫£n th·ªß c√¥ng" key="2">
                  <Form
                    form={formManual}
                    layout="vertical"
                    onFinish={handleSubmitManual}
                    disabled={loading}
                    size="large"
                  >
                    <Form.Item
                      name="role"
                      label="Ch·ªçn vai tr√≤"
                      rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn vai tr√≤' }]}
                    >
                      <Select placeholder="Ch·ªçn vai tr√≤">
                        <Option value="admin">Admin</Option>
                        <Option value="manager">Manager</Option>
                      </Select>
                    </Form.Item>
                    <Form.Item
                      name="fullName"
                      label="H·ªç v√† t√™n"
                      rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p h·ªç t√™n' }]}
                    >
                      <Input prefix={<UserOutlined />} placeholder="Nguy·ªÖn VƒÉn A" />
                    </Form.Item>
                    <Form.Item
                      name="phoneNumber"
                      label="S·ªë ƒëi·ªán tho·∫°i"
                      rules={[{ required: false, message: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i' }]}
                    >
                      <Input prefix={<PhoneOutlined />} placeholder="0123456789" />
                    </Form.Item>
                    <Form.Item
                      name="email"
                      label="Email"
                      rules={[
                        { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
                        { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' },
                      ]}
                    >
                      <Input prefix={<MailOutlined />} placeholder="email@domain.com" />
                    </Form.Item>
                    <Form.Item
                      name="password"
                      label="M·∫≠t kh·∫©u"
                      rules={[
                        { required: true, message: 'Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u' },
                        {
                          pattern: /^(?=.*[A-Z])(?=.*[!@#$%^&*])/, // At least 1 uppercase and 1 special char
                          message: '√çt nh·∫•t 1 ch·ªØ hoa & 1 k√Ω t·ª± ƒë·∫∑c bi·ªát',
                        },
                        { min: 8, message: 'M·∫≠t kh·∫©u t·ªëi thi·ªÉu 8 k√Ω t·ª±' },
                      ]}
                      hasFeedback
                    >
                      <Input.Password prefix={<LockOutlined />} placeholder="M·∫≠t kh·∫©u" />
                    </Form.Item>
                    <Form.Item
                      name="confirmPassword"
                      label="X√°c nh·∫≠n m·∫≠t kh·∫©u"
                      dependencies={['password']}
                      hasFeedback
                      rules={[
                        { required: true, message: 'Vui l√≤ng x√°c nh·∫≠n m·∫≠t kh·∫©u' },
                        ({ getFieldValue }) => ({
                          validator(_, value) {
                            if (!value || getFieldValue('password') === value) {
                              return Promise.resolve();
                            }
                            return Promise.reject(new Error('M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp'));
                          },
                        }),
                      ]}
                    >
                      <Input.Password prefix={<LockOutlined />} placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u" />
                    </Form.Item>
                    <Form.Item>
                      <Space>
                        <Button
                          type="primary"
                          htmlType="submit"
                          icon={<UserAddOutlined />}
                          loading={loading}
                          size="large"
                        >
                          T·∫°o t√†i kho·∫£n
                        </Button>
                      </Space>
                    </Form.Item>
                  </Form>
                </TabPane>

                <TabPane tab="‚¨áÔ∏è H·∫° vai tr√≤ v·ªÅ User" key="3">
                  <Form
                    layout="vertical"
                    onFinish={async (values) => {
                      try {
                        setLoading(true);
                        const response = await RoleApi.demoteRoleToUser(values.email);
                        if (response.isSuccess) {
                          message.success('H·∫° vai tr√≤ v·ªÅ User th√†nh c√¥ng!');
                        } else {
                          message.error(response.message || 'H·∫° vai tr√≤ th·∫•t b·∫°i!');
                        }
                      } catch (error: any) {
                        message.error(error.message || 'L·ªói khi h·∫° vai tr√≤!');
                      } finally {
                        setLoading(false);
                      }
                    }}
                    size="large"
                  >
                    <Form.Item
                      name="email"
                      label="Email ng∆∞·ªùi d√πng"
                      rules={[
                        { required: true, message: 'Vui l√≤ng nh·∫≠p email' },
                        { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' },
                      ]}
                    >
                      <Input prefix={<MailOutlined />} placeholder="email@domain.com" />
                    </Form.Item>
                    <Form.Item>
                      <Button
                        type="primary"
                        htmlType="submit"
                        icon={<TeamOutlined />}
                        loading={loading}
                        size="large"
                      >
                        H·∫° vai tr√≤ v·ªÅ User
                      </Button>
                    </Form.Item>
                  </Form>
                </TabPane>
              </Tabs>
            </Spin>
          </Card>
        </Col>
        <Col xs={24} lg={8}>
          <Card>
            <Title level={4}>
              <InfoCircleOutlined style={{ marginRight: '8px' }} />
              H∆∞·ªõng d·∫´n
            </Title>
            <Divider />
            <Space direction="vertical" size="middle">
              <Alert
                message="G√°n b·∫±ng Email"
                description={
                  <ul style={{ margin: 0 }}>
                    <li>- Ng∆∞·ªùi d√πng ƒë√£ c√≥ t√†i kho·∫£n</li>
                    <li>- Email h·ª£p l·ªá v√† ƒë√£ x√°c th·ª±c</li>
                    <li>- Ch∆∞a c√≥ quy·ªÅn admin/manager</li>
                  </ul>
                }
                type="info"
                showIcon
              />
              <Alert
                message="T·∫°o t√†i kho·∫£n th·ªß c√¥ng"
                description={
                  <ul style={{ margin: 0 }}>
                    <li>- Nh·∫≠p ƒë·∫ßy ƒë·ªß: h·ªç t√™n, email, m·∫≠t kh·∫©u</li>
                    <li>- M·∫≠t kh·∫©u m·∫°nh: ‚â• 8 k√Ω t·ª±, 1 ch·ªØ hoa & 1 k√Ω t·ª± ƒë·∫∑c bi·ªát</li>
                    <li>- Ch·ªçn ƒë√∫ng vai tr√≤ mu·ªën t·∫°o</li>
                  </ul>
                }
                type="success"
                showIcon
              />
            </Space>
          </Card>
        </Col>
      </Row>
    </Space>
  );
};

export default SetRole;
